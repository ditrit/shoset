// Code generated by MockGen. DO NOT EDIT.
// Source: file/fileLibrary.go

// Package mock_fileSync is a generated GoMock package.
package mock_fileSync

import (
	reflect "reflect"

	fileSync "github.com/ditrit/shoset/file"
	msg "github.com/ditrit/shoset/msg"
	gomock "github.com/golang/mock/gomock"
)

// MockFileLibrary is a mock of FileLibrary interface.
type MockFileLibrary struct {
	ctrl     *gomock.Controller
	recorder *MockFileLibraryMockRecorder
}

// MockFileLibraryMockRecorder is the mock recorder for MockFileLibrary.
type MockFileLibraryMockRecorder struct {
	mock *MockFileLibrary
}

// NewMockFileLibrary creates a new mock instance.
func NewMockFileLibrary(ctrl *gomock.Controller) *MockFileLibrary {
	mock := &MockFileLibrary{ctrl: ctrl}
	mock.recorder = &MockFileLibraryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileLibrary) EXPECT() *MockFileLibraryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockFileLibrary) Add(libraryPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", libraryPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockFileLibraryMockRecorder) Add(libraryPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockFileLibrary)(nil).Add), libraryPath)
}

// CreateFile mocks base method.
func (m *MockFileLibrary) CreateFile(file fileSync.File, uuid string) (fileSync.SyncFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", file, uuid)
	ret0, _ := ret[0].(fileSync.SyncFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockFileLibraryMockRecorder) CreateFile(file, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockFileLibrary)(nil).CreateFile), file, uuid)
}

// DeleteFile mocks base method.
func (m *MockFileLibrary) DeleteFile(uuid string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteFile", uuid)
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFileLibraryMockRecorder) DeleteFile(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFileLibrary)(nil).DeleteFile), uuid)
}

// GetDir mocks base method.
func (m *MockFileLibrary) GetDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDir indicates an expected call of GetDir.
func (mr *MockFileLibraryMockRecorder) GetDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDir", reflect.TypeOf((*MockFileLibrary)(nil).GetDir))
}

// GetFile mocks base method.
func (m *MockFileLibrary) GetFile(uuid string) (fileSync.SyncFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", uuid)
	ret0, _ := ret[0].(fileSync.SyncFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile.
func (mr *MockFileLibraryMockRecorder) GetFile(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockFileLibrary)(nil).GetFile), uuid)
}

// GetHash mocks base method.
func (m *MockFileLibrary) GetHash() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHash")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHash indicates an expected call of GetHash.
func (mr *MockFileLibraryMockRecorder) GetHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHash", reflect.TypeOf((*MockFileLibrary)(nil).GetHash))
}

// GetMessageLibrary mocks base method.
func (m *MockFileLibrary) GetMessageLibrary() (*msg.FileMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageLibrary")
	ret0, _ := ret[0].(*msg.FileMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageLibrary indicates an expected call of GetMessageLibrary.
func (mr *MockFileLibraryMockRecorder) GetMessageLibrary() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageLibrary", reflect.TypeOf((*MockFileLibrary)(nil).GetMessageLibrary))
}

// LoadLibrary mocks base method.
func (m *MockFileLibrary) LoadLibrary() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadLibrary")
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadLibrary indicates an expected call of LoadLibrary.
func (mr *MockFileLibraryMockRecorder) LoadLibrary() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadLibrary", reflect.TypeOf((*MockFileLibrary)(nil).LoadLibrary))
}

// Modify mocks base method.
func (m *MockFileLibrary) Modify(libraryPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Modify", libraryPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Modify indicates an expected call of Modify.
func (mr *MockFileLibraryMockRecorder) Modify(libraryPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Modify", reflect.TypeOf((*MockFileLibrary)(nil).Modify), libraryPath)
}

// Move mocks base method.
func (m *MockFileLibrary) Move(from, to string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Move", from, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// Move indicates an expected call of Move.
func (mr *MockFileLibraryMockRecorder) Move(from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Move", reflect.TypeOf((*MockFileLibrary)(nil).Move), from, to)
}

// PrintAllFiles mocks base method.
func (m *MockFileLibrary) PrintAllFiles() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrintAllFiles")
}

// PrintAllFiles indicates an expected call of PrintAllFiles.
func (mr *MockFileLibraryMockRecorder) PrintAllFiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintAllFiles", reflect.TypeOf((*MockFileLibrary)(nil).PrintAllFiles))
}

// Remove mocks base method.
func (m *MockFileLibrary) Remove(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockFileLibraryMockRecorder) Remove(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockFileLibrary)(nil).Remove), path)
}

// SetFileTransfer mocks base method.
func (m *MockFileLibrary) SetFileTransfer(fileTransfer fileSync.FileTransfer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFileTransfer", fileTransfer)
}

// SetFileTransfer indicates an expected call of SetFileTransfer.
func (mr *MockFileLibraryMockRecorder) SetFileTransfer(fileTransfer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFileTransfer", reflect.TypeOf((*MockFileLibrary)(nil).SetFileTransfer), fileTransfer)
}

// UpdateLibrary mocks base method.
func (m *MockFileLibrary) UpdateLibrary(listFiles []fileSync.FileState, conn fileSync.ShosetConn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateLibrary", listFiles, conn)
}

// UpdateLibrary indicates an expected call of UpdateLibrary.
func (mr *MockFileLibraryMockRecorder) UpdateLibrary(listFiles, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLibrary", reflect.TypeOf((*MockFileLibrary)(nil).UpdateLibrary), listFiles, conn)
}

// UploadFile mocks base method.
func (m *MockFileLibrary) UploadFile(file fileSync.File) (fileSync.SyncFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", file)
	ret0, _ := ret[0].(fileSync.SyncFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockFileLibraryMockRecorder) UploadFile(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockFileLibrary)(nil).UploadFile), file)
}
