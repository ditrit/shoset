// Code generated by MockGen. DO NOT EDIT.
// Source: file/fileTransfer.go

// Package mock_fileSync is a generated GoMock package.
package mock_fileSync

import (
	reflect "reflect"

	fileSync "github.com/ditrit/shoset/file"
	msg "github.com/ditrit/shoset/msg"
	gomock "github.com/golang/mock/gomock"
	zerolog "github.com/rs/zerolog"
)

// MockFileTransfer is a mock of FileTransfer interface.
type MockFileTransfer struct {
	ctrl     *gomock.Controller
	recorder *MockFileTransferMockRecorder
}

// MockFileTransferMockRecorder is the mock recorder for MockFileTransfer.
type MockFileTransferMockRecorder struct {
	mock *MockFileTransfer
}

// NewMockFileTransfer creates a new mock instance.
func NewMockFileTransfer(ctrl *gomock.Controller) *MockFileTransfer {
	mock := &MockFileTransfer{ctrl: ctrl}
	mock.recorder = &MockFileTransferMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileTransfer) EXPECT() *MockFileTransferMockRecorder {
	return m.recorder
}

// AddFileLeecher mocks base method.
func (m *MockFileTransfer) AddFileLeecher(fileLeecher *fileSync.FileLeecher) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddFileLeecher", fileLeecher)
}

// AddFileLeecher indicates an expected call of AddFileLeecher.
func (mr *MockFileTransferMockRecorder) AddFileLeecher(fileLeecher interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFileLeecher", reflect.TypeOf((*MockFileTransfer)(nil).AddFileLeecher), fileLeecher)
}

// AddFileLeecherToConn mocks base method.
func (m *MockFileTransfer) AddFileLeecherToConn(fileLeecher *fileSync.FileLeecher, conn fileSync.ShosetConn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddFileLeecherToConn", fileLeecher, conn)
}

// AddFileLeecherToConn indicates an expected call of AddFileLeecherToConn.
func (mr *MockFileTransferMockRecorder) AddFileLeecherToConn(fileLeecher, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFileLeecherToConn", reflect.TypeOf((*MockFileTransfer)(nil).AddFileLeecherToConn), fileLeecher, conn)
}

// AddUploadConn mocks base method.
func (m *MockFileTransfer) AddUploadConn(conn fileSync.ShosetConn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUploadConn", conn)
}

// AddUploadConn indicates an expected call of AddUploadConn.
func (mr *MockFileTransferMockRecorder) AddUploadConn(conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUploadConn", reflect.TypeOf((*MockFileTransfer)(nil).AddUploadConn), conn)
}

// AskChunk mocks base method.
func (m *MockFileTransfer) AskChunk(conn fileSync.ShosetConn, message *msg.FileMessage, sendRate bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AskChunk", conn, message, sendRate)
}

// AskChunk indicates an expected call of AskChunk.
func (mr *MockFileTransferMockRecorder) AskChunk(conn, message, sendRate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskChunk", reflect.TypeOf((*MockFileTransfer)(nil).AskChunk), conn, message, sendRate)
}

// AskInfoFile mocks base method.
func (m *MockFileTransfer) AskInfoFile(conn fileSync.ShosetConn, fileState fileSync.FileState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AskInfoFile", conn, fileState)
}

// AskInfoFile indicates an expected call of AskInfoFile.
func (mr *MockFileTransferMockRecorder) AskInfoFile(conn, fileState interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskInfoFile", reflect.TypeOf((*MockFileTransfer)(nil).AskInfoFile), conn, fileState)
}

// Broadcast mocks base method.
func (m *MockFileTransfer) Broadcast(message *msg.FileMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Broadcast", message)
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockFileTransferMockRecorder) Broadcast(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockFileTransfer)(nil).Broadcast), message)
}

// DecreaseMissingLength mocks base method.
func (m *MockFileTransfer) DecreaseMissingLength(length int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DecreaseMissingLength", length)
}

// DecreaseMissingLength indicates an expected call of DecreaseMissingLength.
func (mr *MockFileTransferMockRecorder) DecreaseMissingLength(length interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecreaseMissingLength", reflect.TypeOf((*MockFileTransfer)(nil).DecreaseMissingLength), length)
}

// DeleteLeecher mocks base method.
func (m *MockFileTransfer) DeleteLeecher(fileUUID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteLeecher", fileUUID)
}

// DeleteLeecher indicates an expected call of DeleteLeecher.
func (mr *MockFileTransferMockRecorder) DeleteLeecher(fileUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLeecher", reflect.TypeOf((*MockFileTransfer)(nil).DeleteLeecher), fileUUID)
}

// GetLeecher mocks base method.
func (m *MockFileTransfer) GetLeecher(fileUUID string) *fileSync.FileLeecher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeecher", fileUUID)
	ret0, _ := ret[0].(*fileSync.FileLeecher)
	return ret0
}

// GetLeecher indicates an expected call of GetLeecher.
func (mr *MockFileTransferMockRecorder) GetLeecher(fileUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeecher", reflect.TypeOf((*MockFileTransfer)(nil).GetLeecher), fileUUID)
}

// GetLibrary mocks base method.
func (m *MockFileTransfer) GetLibrary() fileSync.FileLibrary {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLibrary")
	ret0, _ := ret[0].(fileSync.FileLibrary)
	return ret0
}

// GetLibrary indicates an expected call of GetLibrary.
func (mr *MockFileTransferMockRecorder) GetLibrary() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLibrary", reflect.TypeOf((*MockFileTransfer)(nil).GetLibrary))
}

// GetLogger mocks base method.
func (m *MockFileTransfer) GetLogger() *zerolog.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogger")
	ret0, _ := ret[0].(*zerolog.Logger)
	return ret0
}

// GetLogger indicates an expected call of GetLogger.
func (mr *MockFileTransferMockRecorder) GetLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogger", reflect.TypeOf((*MockFileTransfer)(nil).GetLogger))
}

// GetMissingLength mocks base method.
func (m *MockFileTransfer) GetMissingLength() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMissingLength")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetMissingLength indicates an expected call of GetMissingLength.
func (mr *MockFileTransferMockRecorder) GetMissingLength() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMissingLength", reflect.TypeOf((*MockFileTransfer)(nil).GetMissingLength))
}

// GetReceiveQueue mocks base method.
func (m *MockFileTransfer) GetReceiveQueue(conn *fileSync.ShosetConn) *fileSync.MessageQueue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceiveQueue", conn)
	ret0, _ := ret[0].(*fileSync.MessageQueue)
	return ret0
}

// GetReceiveQueue indicates an expected call of GetReceiveQueue.
func (mr *MockFileTransferMockRecorder) GetReceiveQueue(conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceiveQueue", reflect.TypeOf((*MockFileTransfer)(nil).GetReceiveQueue), conn)
}

// HandleReceiveMessage mocks base method.
func (m *MockFileTransfer) HandleReceiveMessage(messageQueue *fileSync.MessageQueue, conn fileSync.ShosetConn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleReceiveMessage", messageQueue, conn)
}

// HandleReceiveMessage indicates an expected call of HandleReceiveMessage.
func (mr *MockFileTransferMockRecorder) HandleReceiveMessage(messageQueue, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleReceiveMessage", reflect.TypeOf((*MockFileTransfer)(nil).HandleReceiveMessage), messageQueue, conn)
}

// HandleReceiveMessageFromQueue mocks base method.
func (m *MockFileTransfer) HandleReceiveMessageFromQueue(fileMessage msg.FileMessage, c fileSync.ShosetConn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleReceiveMessageFromQueue", fileMessage, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleReceiveMessageFromQueue indicates an expected call of HandleReceiveMessageFromQueue.
func (mr *MockFileTransferMockRecorder) HandleReceiveMessageFromQueue(fileMessage, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleReceiveMessageFromQueue", reflect.TypeOf((*MockFileTransfer)(nil).HandleReceiveMessageFromQueue), fileMessage, c)
}

// HandleSendMessage mocks base method.
func (m *MockFileTransfer) HandleSendMessage(messageQueue *fileSync.MessageQueue, conn fileSync.ShosetConn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleSendMessage", messageQueue, conn)
}

// HandleSendMessage indicates an expected call of HandleSendMessage.
func (mr *MockFileTransferMockRecorder) HandleSendMessage(messageQueue, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSendMessage", reflect.TypeOf((*MockFileTransfer)(nil).HandleSendMessage), messageQueue, conn)
}

// HandleSendMessageFromQueue mocks base method.
func (m *MockFileTransfer) HandleSendMessageFromQueue(fileMessage msg.FileMessage, c fileSync.ShosetConn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleSendMessageFromQueue", fileMessage, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleSendMessageFromQueue indicates an expected call of HandleSendMessageFromQueue.
func (mr *MockFileTransferMockRecorder) HandleSendMessageFromQueue(fileMessage, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSendMessageFromQueue", reflect.TypeOf((*MockFileTransfer)(nil).HandleSendMessageFromQueue), fileMessage, c)
}

// Init mocks base method.
func (m *MockFileTransfer) Init(library fileSync.FileLibrary, logger zerolog.Logger, userMessageQueue *msg.Queue, broadcast func(*msg.FileMessage)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init", library, logger, userMessageQueue, broadcast)
}

// Init indicates an expected call of Init.
func (mr *MockFileTransferMockRecorder) Init(library, logger, userMessageQueue, broadcast interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockFileTransfer)(nil).Init), library, logger, userMessageQueue, broadcast)
}

// InitLeecher mocks base method.
func (m *MockFileTransfer) InitLeecher(syncFile fileSync.SyncFile, conn fileSync.ShosetConn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitLeecher", syncFile, conn)
}

// InitLeecher indicates an expected call of InitLeecher.
func (mr *MockFileTransferMockRecorder) InitLeecher(syncFile, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitLeecher", reflect.TypeOf((*MockFileTransfer)(nil).InitLeecher), syncFile, conn)
}

// IsAuthorised mocks base method.
func (m *MockFileTransfer) IsAuthorised(conn fileSync.ShosetConn) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthorised", conn)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAuthorised indicates an expected call of IsAuthorised.
func (mr *MockFileTransferMockRecorder) IsAuthorised(conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthorised", reflect.TypeOf((*MockFileTransfer)(nil).IsAuthorised), conn)
}

// ReceiveAskBitfieldMessage mocks base method.
func (m *MockFileTransfer) ReceiveAskBitfieldMessage(conn fileSync.ShosetConn, message *msg.FileMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReceiveAskBitfieldMessage", conn, message)
}

// ReceiveAskBitfieldMessage indicates an expected call of ReceiveAskBitfieldMessage.
func (mr *MockFileTransferMockRecorder) ReceiveAskBitfieldMessage(conn, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveAskBitfieldMessage", reflect.TypeOf((*MockFileTransfer)(nil).ReceiveAskBitfieldMessage), conn, message)
}

// ReceiveAskChunk mocks base method.
func (m *MockFileTransfer) ReceiveAskChunk(conn fileSync.ShosetConn, message *msg.FileMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveAskChunk", conn, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReceiveAskChunk indicates an expected call of ReceiveAskChunk.
func (mr *MockFileTransferMockRecorder) ReceiveAskChunk(conn, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveAskChunk", reflect.TypeOf((*MockFileTransfer)(nil).ReceiveAskChunk), conn, message)
}

// ReceiveAskInfoMessage mocks base method.
func (m *MockFileTransfer) ReceiveAskInfoMessage(conn fileSync.ShosetConn, message *msg.FileMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReceiveAskInfoMessage", conn, message)
}

// ReceiveAskInfoMessage indicates an expected call of ReceiveAskInfoMessage.
func (mr *MockFileTransferMockRecorder) ReceiveAskInfoMessage(conn, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveAskInfoMessage", reflect.TypeOf((*MockFileTransfer)(nil).ReceiveAskInfoMessage), conn, message)
}

// ReceiveAuthorisedMessage mocks base method.
func (m *MockFileTransfer) ReceiveAuthorisedMessage(conn fileSync.ShosetConn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReceiveAuthorisedMessage", conn)
}

// ReceiveAuthorisedMessage indicates an expected call of ReceiveAuthorisedMessage.
func (mr *MockFileTransferMockRecorder) ReceiveAuthorisedMessage(conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveAuthorisedMessage", reflect.TypeOf((*MockFileTransfer)(nil).ReceiveAuthorisedMessage), conn)
}

// ReceiveBitfieldMessage mocks base method.
func (m *MockFileTransfer) ReceiveBitfieldMessage(conn fileSync.ShosetConn, message *msg.FileMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReceiveBitfieldMessage", conn, message)
}

// ReceiveBitfieldMessage indicates an expected call of ReceiveBitfieldMessage.
func (mr *MockFileTransferMockRecorder) ReceiveBitfieldMessage(conn, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveBitfieldMessage", reflect.TypeOf((*MockFileTransfer)(nil).ReceiveBitfieldMessage), conn, message)
}

// ReceiveChunk mocks base method.
func (m *MockFileTransfer) ReceiveChunk(conn fileSync.ShosetConn, message *msg.FileMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveChunk", conn, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReceiveChunk indicates an expected call of ReceiveChunk.
func (mr *MockFileTransferMockRecorder) ReceiveChunk(conn, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveChunk", reflect.TypeOf((*MockFileTransfer)(nil).ReceiveChunk), conn, message)
}

// ReceiveCongestionMessage mocks base method.
func (m *MockFileTransfer) ReceiveCongestionMessage(conn fileSync.ShosetConn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReceiveCongestionMessage", conn)
}

// ReceiveCongestionMessage indicates an expected call of ReceiveCongestionMessage.
func (mr *MockFileTransferMockRecorder) ReceiveCongestionMessage(conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveCongestionMessage", reflect.TypeOf((*MockFileTransfer)(nil).ReceiveCongestionMessage), conn)
}

// ReceiveHaveMessage mocks base method.
func (m *MockFileTransfer) ReceiveHaveMessage(conn fileSync.ShosetConn, message *msg.FileMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReceiveHaveMessage", conn, message)
}

// ReceiveHaveMessage indicates an expected call of ReceiveHaveMessage.
func (mr *MockFileTransferMockRecorder) ReceiveHaveMessage(conn, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveHaveMessage", reflect.TypeOf((*MockFileTransfer)(nil).ReceiveHaveMessage), conn, message)
}

// ReceiveInterestedMessage mocks base method.
func (m *MockFileTransfer) ReceiveInterestedMessage(conn fileSync.ShosetConn, message *msg.FileMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReceiveInterestedMessage", conn, message)
}

// ReceiveInterestedMessage indicates an expected call of ReceiveInterestedMessage.
func (mr *MockFileTransferMockRecorder) ReceiveInterestedMessage(conn, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveInterestedMessage", reflect.TypeOf((*MockFileTransfer)(nil).ReceiveInterestedMessage), conn, message)
}

// ReceiveMessage mocks base method.
func (m *MockFileTransfer) ReceiveMessage(message *msg.FileMessage, conn fileSync.ShosetConn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReceiveMessage", message, conn)
}

// ReceiveMessage indicates an expected call of ReceiveMessage.
func (mr *MockFileTransferMockRecorder) ReceiveMessage(message, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveMessage", reflect.TypeOf((*MockFileTransfer)(nil).ReceiveMessage), message, conn)
}

// ReceiveUnauthorisedMessage mocks base method.
func (m *MockFileTransfer) ReceiveUnauthorisedMessage(conn fileSync.ShosetConn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReceiveUnauthorisedMessage", conn)
}

// ReceiveUnauthorisedMessage indicates an expected call of ReceiveUnauthorisedMessage.
func (mr *MockFileTransferMockRecorder) ReceiveUnauthorisedMessage(conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveUnauthorisedMessage", reflect.TypeOf((*MockFileTransfer)(nil).ReceiveUnauthorisedMessage), conn)
}

// RemoveConn mocks base method.
func (m *MockFileTransfer) RemoveConn(conn fileSync.ShosetConn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveConn", conn)
}

// RemoveConn indicates an expected call of RemoveConn.
func (mr *MockFileTransferMockRecorder) RemoveConn(conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveConn", reflect.TypeOf((*MockFileTransfer)(nil).RemoveConn), conn)
}

// RemoveFileLeecher mocks base method.
func (m *MockFileTransfer) RemoveFileLeecher(fileLeecher *fileSync.FileLeecher) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveFileLeecher", fileLeecher)
}

// RemoveFileLeecher indicates an expected call of RemoveFileLeecher.
func (mr *MockFileTransferMockRecorder) RemoveFileLeecher(fileLeecher interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFileLeecher", reflect.TypeOf((*MockFileTransfer)(nil).RemoveFileLeecher), fileLeecher)
}

// RemoveFileSeeder mocks base method.
func (m *MockFileTransfer) RemoveFileSeeder(fileSeeder *fileSync.FileSeeder) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveFileSeeder", fileSeeder)
}

// RemoveFileSeeder indicates an expected call of RemoveFileSeeder.
func (mr *MockFileTransferMockRecorder) RemoveFileSeeder(fileSeeder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFileSeeder", reflect.TypeOf((*MockFileTransfer)(nil).RemoveFileSeeder), fileSeeder)
}

// SendAuthorisedMessage mocks base method.
func (m *MockFileTransfer) SendAuthorisedMessage(conn fileSync.ShosetConn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendAuthorisedMessage", conn)
}

// SendAuthorisedMessage indicates an expected call of SendAuthorisedMessage.
func (mr *MockFileTransferMockRecorder) SendAuthorisedMessage(conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAuthorisedMessage", reflect.TypeOf((*MockFileTransfer)(nil).SendAuthorisedMessage), conn)
}

// SendCongestionMessage mocks base method.
func (m *MockFileTransfer) SendCongestionMessage(conn fileSync.ShosetConn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendCongestionMessage", conn)
}

// SendCongestionMessage indicates an expected call of SendCongestionMessage.
func (mr *MockFileTransferMockRecorder) SendCongestionMessage(conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCongestionMessage", reflect.TypeOf((*MockFileTransfer)(nil).SendCongestionMessage), conn)
}

// SendMessage mocks base method.
func (m *MockFileTransfer) SendMessage(message msg.FileMessage, conn fileSync.ShosetConn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendMessage", message, conn)
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockFileTransferMockRecorder) SendMessage(message, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockFileTransfer)(nil).SendMessage), message, conn)
}

// SendUnauthorisedMessage mocks base method.
func (m *MockFileTransfer) SendUnauthorisedMessage(conn fileSync.ShosetConn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendUnauthorisedMessage", conn)
}

// SendUnauthorisedMessage indicates an expected call of SendUnauthorisedMessage.
func (mr *MockFileTransferMockRecorder) SendUnauthorisedMessage(conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendUnauthorisedMessage", reflect.TypeOf((*MockFileTransfer)(nil).SendUnauthorisedMessage), conn)
}

// SetExternalCommands mocks base method.
func (m *MockFileTransfer) SetExternalCommands(ec *fileSync.ExternalCommands) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetExternalCommands", ec)
}

// SetExternalCommands indicates an expected call of SetExternalCommands.
func (mr *MockFileTransferMockRecorder) SetExternalCommands(ec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExternalCommands", reflect.TypeOf((*MockFileTransfer)(nil).SetExternalCommands), ec)
}

// SetNbConn mocks base method.
func (m *MockFileTransfer) SetNbConn(nbConn int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNbConn", nbConn)
}

// SetNbConn indicates an expected call of SetNbConn.
func (mr *MockFileTransferMockRecorder) SetNbConn(nbConn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNbConn", reflect.TypeOf((*MockFileTransfer)(nil).SetNbConn), nbConn)
}

// UserPush mocks base method.
func (m *MockFileTransfer) UserPush(message *msg.FileMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UserPush", message)
}

// UserPush indicates an expected call of UserPush.
func (mr *MockFileTransferMockRecorder) UserPush(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserPush", reflect.TypeOf((*MockFileTransfer)(nil).UserPush), message)
}

// WriteRecords mocks base method.
func (m *MockFileTransfer) WriteRecords() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteRecords")
}

// WriteRecords indicates an expected call of WriteRecords.
func (mr *MockFileTransferMockRecorder) WriteRecords() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteRecords", reflect.TypeOf((*MockFileTransfer)(nil).WriteRecords))
}
