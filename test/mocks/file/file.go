// Code generated by MockGen. DO NOT EDIT.
// Source: file/file.go

// Package mock_fileSync is a generated GoMock package.
package mock_fileSync

import (
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFile is a mock of File interface.
type MockFile struct {
	ctrl     *gomock.Controller
	recorder *MockFileMockRecorder
}

// MockFileMockRecorder is the mock recorder for MockFile.
type MockFileMockRecorder struct {
	mock *MockFile
}

// NewMockFile creates a new mock instance.
func NewMockFile(ctrl *gomock.Controller) *MockFile {
	mock := &MockFile{ctrl: ctrl}
	mock.recorder = &MockFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFile) EXPECT() *MockFileMockRecorder {
	return m.recorder
}

// CalculateHash mocks base method.
func (m *MockFile) CalculateHash() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateHash")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateHash indicates an expected call of CalculateHash.
func (mr *MockFileMockRecorder) CalculateHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateHash", reflect.TypeOf((*MockFile)(nil).CalculateHash))
}

// CalculateHashMap mocks base method.
func (m *MockFile) CalculateHashMap() (map[int]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateHashMap")
	ret0, _ := ret[0].(map[int]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateHashMap indicates an expected call of CalculateHashMap.
func (mr *MockFileMockRecorder) CalculateHashMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateHashMap", reflect.TypeOf((*MockFile)(nil).CalculateHashMap))
}

// CloseFile mocks base method.
func (m *MockFile) CloseFile() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseFile")
}

// CloseFile indicates an expected call of CloseFile.
func (mr *MockFileMockRecorder) CloseFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseFile", reflect.TypeOf((*MockFile)(nil).CloseFile))
}

// GetFileInfoMap mocks base method.
func (m *MockFile) GetFileInfoMap() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileInfoMap")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// GetFileInfoMap indicates an expected call of GetFileInfoMap.
func (mr *MockFileMockRecorder) GetFileInfoMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileInfoMap", reflect.TypeOf((*MockFile)(nil).GetFileInfoMap))
}

// GetHash mocks base method.
func (m *MockFile) GetHash() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHash")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHash indicates an expected call of GetHash.
func (mr *MockFileMockRecorder) GetHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHash", reflect.TypeOf((*MockFile)(nil).GetHash))
}

// GetHashChunk mocks base method.
func (m *MockFile) GetHashChunk(index int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHashChunk", index)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHashChunk indicates an expected call of GetHashChunk.
func (mr *MockFileMockRecorder) GetHashChunk(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHashChunk", reflect.TypeOf((*MockFile)(nil).GetHashChunk), index)
}

// GetHashMap mocks base method.
func (m *MockFile) GetHashMap() map[int]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHashMap")
	ret0, _ := ret[0].(map[int]string)
	return ret0
}

// GetHashMap indicates an expected call of GetHashMap.
func (mr *MockFileMockRecorder) GetHashMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHashMap", reflect.TypeOf((*MockFile)(nil).GetHashMap))
}

// GetName mocks base method.
func (m *MockFile) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockFileMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockFile)(nil).GetName))
}

// GetPieceSize mocks base method.
func (m *MockFile) GetPieceSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPieceSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetPieceSize indicates an expected call of GetPieceSize.
func (mr *MockFileMockRecorder) GetPieceSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPieceSize", reflect.TypeOf((*MockFile)(nil).GetPieceSize))
}

// GetRelativePath mocks base method.
func (m *MockFile) GetRelativePath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelativePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRelativePath indicates an expected call of GetRelativePath.
func (mr *MockFileMockRecorder) GetRelativePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelativePath", reflect.TypeOf((*MockFile)(nil).GetRelativePath))
}

// GetSize mocks base method.
func (m *MockFile) GetSize() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSize")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetSize indicates an expected call of GetSize.
func (mr *MockFileMockRecorder) GetSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSize", reflect.TypeOf((*MockFile)(nil).GetSize))
}

// GetVersion mocks base method.
func (m *MockFile) GetVersion() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockFileMockRecorder) GetVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockFile)(nil).GetVersion))
}

// LoadData mocks base method.
func (m *MockFile) LoadData(chunk int64, chunkSize int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadData", chunk, chunkSize)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadData indicates an expected call of LoadData.
func (mr *MockFileMockRecorder) LoadData(chunk, chunkSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadData", reflect.TypeOf((*MockFile)(nil).LoadData), chunk, chunkSize)
}

// LoadFromMap mocks base method.
func (m *MockFile) LoadFromMap(fileInfoMap map[string]interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LoadFromMap", fileInfoMap)
}

// LoadFromMap indicates an expected call of LoadFromMap.
func (mr *MockFileMockRecorder) LoadFromMap(fileInfoMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadFromMap", reflect.TypeOf((*MockFile)(nil).LoadFromMap), fileInfoMap)
}

// Move mocks base method.
func (m *MockFile) Move(newRelativePath, newName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Move", newRelativePath, newName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Move indicates an expected call of Move.
func (mr *MockFileMockRecorder) Move(newRelativePath, newName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Move", reflect.TypeOf((*MockFile)(nil).Move), newRelativePath, newName)
}

// OpenFile mocks base method.
func (m *MockFile) OpenFile() (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFile")
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFile indicates an expected call of OpenFile.
func (mr *MockFileMockRecorder) OpenFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockFile)(nil).OpenFile))
}

// SetHash mocks base method.
func (m *MockFile) SetHash(hash string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHash", hash)
}

// SetHash indicates an expected call of SetHash.
func (mr *MockFileMockRecorder) SetHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHash", reflect.TypeOf((*MockFile)(nil).SetHash), hash)
}

// SetHashMap mocks base method.
func (m *MockFile) SetHashMap(hashMap map[int]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHashMap", hashMap)
}

// SetHashMap indicates an expected call of SetHashMap.
func (mr *MockFileMockRecorder) SetHashMap(hashMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHashMap", reflect.TypeOf((*MockFile)(nil).SetHashMap), hashMap)
}

// SetName mocks base method.
func (m *MockFile) SetName(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetName", name)
}

// SetName indicates an expected call of SetName.
func (mr *MockFileMockRecorder) SetName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetName", reflect.TypeOf((*MockFile)(nil).SetName), name)
}

// SetRelativePath mocks base method.
func (m *MockFile) SetRelativePath(relativePath string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRelativePath", relativePath)
}

// SetRelativePath indicates an expected call of SetRelativePath.
func (mr *MockFileMockRecorder) SetRelativePath(relativePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRelativePath", reflect.TypeOf((*MockFile)(nil).SetRelativePath), relativePath)
}

// SetVersion mocks base method.
func (m *MockFile) SetVersion(version int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetVersion", version)
}

// SetVersion indicates an expected call of SetVersion.
func (mr *MockFileMockRecorder) SetVersion(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVersion", reflect.TypeOf((*MockFile)(nil).SetVersion), version)
}

// String mocks base method.
func (m *MockFile) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockFileMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockFile)(nil).String))
}

// UpdateMetadata mocks base method.
func (m *MockFile) UpdateMetadata() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetadata")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMetadata indicates an expected call of UpdateMetadata.
func (mr *MockFileMockRecorder) UpdateMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetadata", reflect.TypeOf((*MockFile)(nil).UpdateMetadata))
}

// WriteChunk mocks base method.
func (m *MockFile) WriteChunk(chunk []byte, offset int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteChunk", chunk, offset)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteChunk indicates an expected call of WriteChunk.
func (mr *MockFileMockRecorder) WriteChunk(chunk, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteChunk", reflect.TypeOf((*MockFile)(nil).WriteChunk), chunk, offset)
}
